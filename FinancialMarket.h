#ifndef FINANCIALMARKET_H_
#define FINANCIALMARKET_H_

#include <string>
#include <vector>
#include <set>
#include <map>

#include "OrderVerb.h"
#include "Order.h"

class FinancialMarket
{
public:
    /**
    * Creates a new Order and adds it to the FinancialMarket
    * @param productId The identifier of the product traded on the FinancialMarket
    * @param verb The verb of the Order: either BUY or SELL
    * @param price The price of the Order: how much is paid/received for each unit bought/sold of this product.
    * @param quantity The quantity of the Order: how many units of product can be bought/sold with this Order. This cannot be negative
    * @return
    * - An Optional value containing the Order Identifier generated by the FinancialMarket: in case the Order is correctly created
    * - The Optional empty value: in case of error
    */
    virtual std::optional<std::string> createOrder(const std::string& productId, OrderVerb verb, double price, double quantity) = 0;

    /**
    * Allows to change the quantity and the price of an Order already existing on the Financial Market. This might affect the sorting for the order
    * @param orderId the id of the Order to be modified
    * @param newPrice the new price of the Order (it can be the same as the previous one)
    * @param newQty the new quantity of the Order (it can be the same as the previous one)
    * @return
    * - true: if the order has been modified
    * - false: otherwise
    */
    virtual bool modifyOrder(const std::string& orderId, double newPrice, double newQty) = 0;

    /**
    * Allows to remove an existing Order from the Financial Market.
    * @param orderId the id of the Order to be removed
    * @return
    * - true: in case the order was correctly found and removed
    * - false: otherwise
    */
    virtual bool deleteOrder(const std::string& orderId) = 0;

    /**
    * Allows to retrieve the current status of an Order on the Financial Market by using its OrderId
    * @param orderId the id of the Order to be retrieved
    * @return
    * - An Optional value containing the representation of the Order: in case the Order is available on the Financial Market
    * - The Optional empyt value: in case of error
    */
    virtual std::optional<Order> getOrder(const std::string& orderId) const = 0;

    /**
    * Suspends an active Order.
    * A suspended order is not removed from the FinancialMarket, it is just not to considered as valid when looking
    * at the prices available on the Financial Market.
    * @param orderId the id of the Order to be suspended
    * @return
    * - true: in case the order was correctly found and suspended
    * - false: otherwise
    */
    virtual bool suspendOrder(const std::string& orderId) = 0;

    /**
    * Reactivates a suspended Order.
    * A reactivated Order can be considered again valid when looking at the prices available on the Financial
    * Market.
    * @param orderId the id of the Order to be suspended
    * @return
    * - true: in case the order was correctly found and reactivated
    * - false: otherwise
    */
    virtual bool reactivateOrder(const std::string& orderId) = 0;

    /**
    * Returns the full list of Orders on the Financial Market for the given Product and OrderVerb, sorted by price according to the OrderVerb
    * @param productId The unique identifier of the product traded on the FinancialMarket
    * @param verb The side for which we want to get the list of all the orders
    * @return
    * - A sorted list of Order: in case there are available orders
    * - An empty list: in case there is no Order for the specified Product and OrderVerb or in case of error
    */
    virtual std::vector<Order> getAllOrdersSortedByPrice(const std::string& productId, OrderVerb verb) const = 0;

    /**
    * Allows to retrieve all the active Orders at the best level for the specified Product and
    * OrderVerb.
    * An Order is considered at the best level if both the following conditions are met:
    * - the order is Active
    * - the price of the order is the best available on the OrderBook for that OrderVerb
    * Prices are compared depending on the Verb of the order:
    * - Sell orders - a lower price is better
    * - Buy orders - an higher price is better
    * @param productId The unique identifier of the product traded on the FinancialMarket
    * @param verb The side for which we want to get the best orders
    * @return
    * - A list of Orders: in case there are available orders at the best level
    * - An empty list: in case there is no Order at the best price for the specified Product and OrderVerb or in case of error
    */
    virtual std::vector<Order> getOrdersAtBestLevel(const std::string& productId, OrderVerb verb) const = 0;

    /**
    * Returns the sum of the quantities of all the active Orders at the best level for the specified Product and OrderVerb
    * An Order is considered at the best level if both the following conditions are met:
    * - the order is Active
    * - the price of the order is the best available on the OrderBook for that OrderVerb
    * Prices are compared depending on the Verb of the order:
    * - Sell orders - a lower price is better
    * - Buy orders - an higher price is better
    * @param productId The unique identifier of the product traded on the FinancialMarket
    * @param verb The side for which we want to get the best orders
    * @return
    * - A double value: in case there are available orders at the best level
    * - 0.0: in case there is no Order at the best price for the specified Product and OrderVerb
    * - -1.0:  in case of error
    */
    virtual double getCumulativeQuantityAtBestLevel(const std::string& productId, OrderVerb verb) const = 0;

    virtual ~FinancialMarket() {}
};

#endif //FINANCIALMARKET_H_
